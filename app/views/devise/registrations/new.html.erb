
<div class="sign-up-header" style="min-width: 100%; height: 50px; text-align: center;">
  <p class="create-account-text" style="color: #FFA01C; font-family: 'Roboto', sans-serif; font-weight: bold; font-size: 40px; margin: 0;">Créez votre compte</p>
</div>
<div class="sign-up-header" style="min-width: 100%; display: flex; justify-content: center; padding-top: 30px; padding-bottom: 30px">
  <%= image_tag('progress-bar-sign-up-1.png', alt: 'Progress bar step 1/4', class: 'centered-image', style: "width: 457px") %>
</div>
<div class="sign-up-step-container" style="min-width: 100%; height: 86vh; display: flex">

  <div class="sign-up-left" style="min-width: 50%; display: flex; margin-top: 40px; flex-direction: column">

    <div style="text-align: center; height: 150px">
      <p class="create-account-text" style="font-family: 'Roboto', sans-serif; font-weight: bold; font-size: 32px; margin: 0; width: 460px; margin: auto">Génerez vos factures et suivez vos paiements sur un seul outil</p>
    </div>
    <div class="sign-up-header" style="display: flex; justify-content: center; padding-top: 30px">
      <%= image_tag('undraw_in-the-office_e7pg.svg', alt: 'mindfull', class: 'centered-image', style: "width: 457px") %>
    </div>
  </div>

  <div class="sign-up-right" style="min-width: 50%; padding-top: 40px">
    <%= form_for @user, as: :user, url: step2_users_registrations_path, method: :post do |f| %>
      <%= render 'devise/shared/error_messages', resource: @user %>

      <div class="form-group-sub">
        <%= f.label :email, class: 'sub-custom-label' %>
        <%= f.email_field :email, class: 'sub-custom-input', autofocus: true, autocomplete: "email" %>
        <span id="email-error" class="error-message"></span>
      </div>

      <div class="form-group-sub">
        <%= f.label :password, class: 'sub-custom-label' %>
        <%= f.password_field :password, class: 'sub-custom-input', autocomplete: "new-password" %>
        <div class="password-criteria">
          <span class="criterion" id="criterion-uppercase"><span class="icon">✖</span> Minimum une majuscule</span>
          <span class="criterion" id="criterion-length"><span class="icon">✖</span> Minimum 8 caractères</span>
          <span class="criterion" id="criterion-number"><span class="icon">✖</span> Minimum un chiffre</span>
          <span class="criterion" id="criterion-lowercase"><span class="icon">✖</span> Minimum une minuscule</span>
        </div>
      </div>

      <div class="form-group-sub">
        <%= f.label :password_confirmation, class: 'sub-custom-label' %>
        <%= f.password_field :password_confirmation, class: 'sub-custom-input', autocomplete: "new-password" %>
        <span class="criterion" id="criterion-match"><span class="icon">✖</span>Correspondance des mots de passes</span>
      </div>

      <div class="form-group-sub" style="display: flex; justify-content: right; padding-right: 35px; margin-top: 100px">
        <%= f.submit "Suivant", class: 'sub-custom-button' %>
      </div>
    <% end %>
  </div>

</div>

<style>
  /*css validation mail*/
  .error-message {
  color: red;
  font-size: 12px;
  display: none; /* Masque le message d'erreur par défaut */
}

/* css pour les message de validation du mot de passe*/
.password-criteria {
  font-family: 'Roboto', sans-serif;
  font-size: 15px;
  color: #FFA01C;
  margin-top: 5px;
}

.criterion {
  display: block;
  margin-top: 5px;
}

.criterion .icon {
  margin-right: 5px;
}

.criterion.valid .icon {
  color: green;
  /* content: '✔'; */
}

.criterion:not(.valid) .icon {
  color: red;
  /* content: '✖'; */
}

</style>

<%# js pour checker le mail %>
<script>
document.addEventListener('DOMContentLoaded', function() {
  const emailInput = document.querySelector('.sub-custom-input[type="email"]');
  const emailError = document.getElementById('email-error');

  emailInput.addEventListener('blur', function() {
    const emailValue = emailInput.value;
    const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (emailPattern.test(emailValue)) {
      emailError.style.display = 'none'; // Cache le message d'erreur
    } else {
      emailError.style.display = 'block'; // Affiche le message d'erreur
      emailError.textContent = 'Format de l\'email invalide';
    }
  });
});

// js pour checker le mot de passe 

document.addEventListener('DOMContentLoaded', function() {
  const passwordInput = document.querySelector('.sub-custom-input[type="password"]');
  const criteria = {
    uppercase: document.getElementById('criterion-uppercase'),
    length: document.getElementById('criterion-length'),
    number: document.getElementById('criterion-number'),
    lowercase: document.getElementById('criterion-lowercase')
  };

  passwordInput.addEventListener('input', function() {
    const passwordValue = passwordInput.value;

    // Vérifie chaque critère
    // criteria.uppercase.classList.toggle('valid', /[A-Z]/.test(passwordValue));
    // criteria.length.classList.toggle('valid', passwordValue.length >= 8);
    // criteria.number.classList.toggle('valid', /\d/.test(passwordValue));
    // criteria.lowercase.classList.toggle('valid', /[a-z]/.test(passwordValue));
    updateCriterion(criteria.uppercase, /[A-Z]/.test(passwordValue));
    updateCriterion(criteria.length, passwordValue.length >= 8);
    updateCriterion(criteria.number, /\d/.test(passwordValue));
    updateCriterion(criteria.lowercase, /[a-z]/.test(passwordValue));
  });

  function updateCriterion(criterionElement, isValid) {
    const iconElement = criterionElement.querySelector('.icon');
    if (isValid) {
      criterionElement.classList.add('valid');
      iconElement.textContent = '✔';
      iconElement.style.color = 'green';
    } else {
      criterionElement.classList.remove('valid');
      iconElement.textContent = '✖';
      iconElement.style.color = 'red';
    }
  }

});

//js pour checker la correspondance entres les deux mots de passes 

document.addEventListener('DOMContentLoaded', function() {
  const passwordInput = document.querySelector('.sub-custom-input[type="password"]');
  const confirmPasswordInput = document.querySelector('.sub-custom-input[name="user[password_confirmation]"]');
  const matchCriterion = document.getElementById('criterion-match');

  confirmPasswordInput.addEventListener('input', function() {
    const passwordValue = passwordInput.value;
    const confirmPasswordValue = confirmPasswordInput.value;
    const iconElement = matchCriterion.querySelector('.icon');

    if (passwordValue === confirmPasswordValue && passwordValue !== "") {
      matchCriterion.classList.add('valid');
      iconElement.textContent = '✔';
      iconElement.style.color = 'green';
    } else {
      matchCriterion.classList.remove('valid');
      iconElement.textContent = '✖';
      iconElement.style.color = confirmPasswordValue ? 'red' : 'grey';
    }
  });
});
</script>